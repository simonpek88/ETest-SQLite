# coding UTF-8
import os
import re
import time

import apsw
import openpyxl
import pandas as pd
import streamlit as st
import streamlit_antd_components as sac
from docx import Document
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.oxml.ns import qn
from docx.shared import Pt, RGBColor
from streamlit_extras.badges import badge
from xlsxwriter.workbook import Workbook

from commFunc import (getParam, mdb_del, mdb_ins, mdb_modi, mdb_sel,
                      qianfan_AI_GenerQues, updatePyFileinfo)
from streamlit_extras.metric_cards import style_metric_cards

# cSpell:ignoreRegExp /[^\s]{16,}/
# cSpell:ignoreRegExp /\b[A-Z]{3,15}\b/g


def getUserCName(userName):
    SQL = "SELECT userCName, StationCN from user where userName = " + str(userName)
    rows = mdb_sel(cur, SQL)
    if rows:
        st.session_state.userCName = rows[0][0]
        st.session_state.StationCN = rows[0][1]
    else:
        st.session_state.userCName = "Êú™ÊâæÂà∞"
        st.session_state.StationCN = "Êú™ÊâæÂà∞"


def delOutdatedTable():
    if st.session_state.examRandom and "examTable" in st.session_state:
        mdb_del(conn, cur, SQL=f"DROP TABLE IF EXISTS {st.session_state.examTable}")
    if "examFinalTable" in st.session_state:
        mdb_del(conn, cur, SQL=f"DROP TABLE IF EXISTS {st.session_state.examFinalTable}")


def changePassword():
    st.write("### :red[‰øÆÊîπÂØÜÁ†Å]")
    changePW = st.empty()
    with changePW.container(border=True):
        oldPassword = st.text_input("ËØ∑ËæìÂÖ•ÂéüÂØÜÁ†Å", max_chars=8, type="password", autocomplete="off")
        newPassword = st.text_input("ËØ∑ËæìÂÖ•Êñ∞ÂØÜÁ†Å", max_chars=8, type="password", autocomplete="off")
        confirmPassword = st.text_input("ËØ∑ÂÜçÊ¨°ËæìÂÖ•Êñ∞ÂØÜÁ†Å", max_chars=8, placeholder="ËØ∑‰∏é‰∏ä‰∏ÄÊ≠•ËæìÂÖ•ÁöÑÂØÜÁ†Å‰∏ÄËá¥", type="password", autocomplete="off")
        if oldPassword:
            SQL = "SELECT ID from user where userName = " + str(st.session_state.userName) + " and userPassword = '" + oldPassword + "'"
            if mdb_sel(cur, SQL):
                if newPassword and confirmPassword and newPassword != "":
                    if newPassword == confirmPassword:
                        buttonSubmit = st.button("Á°ÆËÆ§‰øÆÊîπ")
                        if buttonSubmit:
                            SQL = f"UPDATE user set userPassword = '{newPassword}' where userName = {st.session_state.userName}"
                            mdb_modi(conn, cur, SQL)
                            st.toast("ÂØÜÁ†Å‰øÆÊîπÊàêÂäü, ËØ∑ÈáçÊñ∞ÁôªÂΩï")
                            logout()
                    else:
                        st.warning("‰∏§Ê¨°ËæìÂÖ•ÁöÑÂØÜÁ†Å‰∏ç‰∏ÄËá¥")
                else:
                    st.warning("ËØ∑Ê£ÄÊü•Êñ∞ÂØÜÁ†Å")
            else:
                st.warning("ÂéüÂØÜÁ†Å‰∏çÊ≠£Á°Æ")
        else:
            st.warning("ÂéüÂØÜÁ†Å‰∏çËÉΩ‰∏∫Á©∫")


def login():
    st.write("## :blue[‰∏ì‰∏öÊäÄËÉΩËÄÉËØïÁ≥ªÁªü - Á¶ªÁ∫øÁâà]")
    login = st.empty()
    with login.container(border=True):
        userName = st.text_input("ËØ∑ËæìÂÖ•Áî®Êà∑Âêç", max_chars=8, placeholder="ÂëòÂ∑•ÁºñÁ†Å")
        if userName != "":
            getUserCName(userName)
            st.caption(f"Áî®Êà∑Âêç: :blue[{st.session_state.userCName}] Á´ôÂÆ§: :red[{st.session_state.StationCN}]")
        userPassword = st.text_input("ËØ∑ËæìÂÖ•ÂØÜÁ†Å", max_chars=8, placeholder="Áî®Êà∑ÂàùÂßãÂØÜÁ†Å‰∏∫1234", type="password", autocomplete="off")
        examType = st.selectbox("ËØ∑ÈÄâÊã©ÂäüËÉΩÁ±ªÂûã", ("ÁªÉ‰π†", "ËÄÉËØï"), index=0)
        buttonLogin = st.button("ÁôªÂΩï")
    if buttonLogin:
        if userName != "" and userPassword != "":
            SQL = "SELECT userName, userCName, userType, StationCN from user where userName = " + str(userName) + " and userPassword = '" + userPassword + "'"
            result = mdb_sel(cur, SQL)
            if result:
                st.toast(f"Áî®Êà∑: {result[0][0]} ÂßìÂêç: {result[0][1]} ÁôªÂΩïÊàêÂäü, Ê¨¢ËøéÂõûÊù•")
                login.empty()
                st.session_state.logged_in = True
                st.session_state.userName = result[0][0]
                st.session_state.userCName = result[0][1]
                st.session_state.userType = result[0][2]
                st.session_state.StationCN = result[0][3]
                st.session_state.examLimit = getParam("ÂêåÂú∫ËÄÉËØïÊ¨°Êï∞ÈôêÂà∂", st.session_state.StationCN)
                st.session_state.debug = bool(getParam("ÊµãËØïÊ®°Âºè", st.session_state.StationCN))
                st.session_state.curQues = 0
                st.session_state.examChosen = False
                ClearTables()
                if examType == "ÁªÉ‰π†":
                    st.session_state.examType = "training"
                    st.session_state.examName = "ÁªÉ‰π†È¢òÂ∫ì"
                    st.session_state.examRandom = True
                elif examType == "ËÄÉËØï":
                    st.session_state.examType = "exam"
                    st.session_state.examRandom = bool(getParam("ËÄÉËØïÈ¢òÂ∫ìÊØèÊ¨°ÈöèÊú∫ÁîüÊàê", st.session_state.StationCN))
                st.rerun()
            else:
                st.warning("ÁôªÂΩïÂ§±Ë¥•, ËØ∑Ê£ÄÊü•Áî®Êà∑ÂêçÂíåÂØÜÁ†Å")


def logout():
    delOutdatedTable()
    for key in st.session_state.keys():
        del st.session_state[key]
    st.session_state.logged_in = False

    cur.close()
    conn.close()

    st.rerun()


def todo():
    st.subheader("ÂÆåÂñÑÊü•ËØ¢ÂäüËÉΩ", divider='green')
    st.subheader("È¢òÂ∫ìÂΩïÂÖ•Ê®°Âùó", divider='rainbow')


def aboutInfo():
    emoji = [["ü•∫", "very sad!"], ["üò£", "bad!"], ["üòè", "not bad!"], ["üòã", "happy!"], ["üòä", "fab, thank u so much!"]]
    st.subheader("ÂÖ≥‰∫éÊú¨ËΩØ‰ª∂", divider="rainbow")
    st.subheader(":blue[Powered by Python and Streamlit]")
    logo1, logo2, logo3, logo4, logo5, logo6 = st.columns(6)
    logo7, logo8, logo9, logo10, logo11, logo12 = st.columns(6)
    with logo1:
        st.caption("Python")
        st.image("./Images/logos/python.png")
    with logo2:
        st.caption("Streamlit")
        st.image("./Images/logos/streamlit.png")
    with logo3:
        st.caption("SQLite")
        st.image("./Images/logos/sqlite.png")
    with logo4:
        st.caption("APSW")
        st.image("./Images/logos/apsw.png")
    with logo5:
        st.caption("Pandas")
        st.image("./Images/logos/pandas.png")
    with logo6:
        st.caption("Ant Design")
        st.image("./Images/logos/antd.png")
    with logo7:
        st.caption("iFlytek Spark")
        st.image("./Images/logos/xfxh.png")
    with logo8:
        st.caption("ERNIE Qianfan")
        st.image("./Images/logos/qianfan.png")
    with logo9:
        st.caption("DeepSeek")
        st.image("./Images/logos/deepseek.png")
    display_pypi()
    st.write("###### :violet[‰∏∫‰∫ÜËé∑ÂæóÊõ¥Â•ΩÁöÑ‰ΩøÁî®‰ΩìÈ™å, ËØ∑‰ΩøÁî®ÊµÖËâ≤‰∏ªÈ¢ò]")
    SQL = "SELECT Sum(pyMC) from verinfo"
    verinfo = mdb_sel(cur, SQL)[0][0]
    SQL = "SELECT Max(pyLM) from verinfo"
    verLM = mdb_sel(cur, SQL)[0][0]
    SQL = "SELECT CAST(Sum(pyLM * pyMC) / Sum(pyMC) as FLOAT) from verinfo where pyFile = 'thumbs-up-stars'"
    likeCM = round(mdb_sel(cur, SQL)[0][0], 1)
    st.caption(f"{int(verinfo / 10000)}.{int((verinfo % 10000) / 100)}.{int(verinfo / 10)} building {verinfo} Last Modified: {time.strftime('%Y-%m-%d %H:%M', time.localtime(verLM))} üòç {likeCM}")
    sac.divider(align="center", color="blue")
    stars = sac.rate(label='Please give me a star if you like it!', align='start')
    if stars > 0:
        st.write(f"I feel {emoji[stars - 1][1]} {emoji[stars - 1][0]}")
    SQL = f"UPDATE verinfo set pyMC = pyMC + 1 where pyFile = 'thumbs-up-stars' and pyLM = {stars}"
    mdb_modi(conn, cur, SQL)


def display_pypi():
    #st.write(":hotsprings: streamlit/apsw/pandas/streamlit-antd-components")
    pypi1, pypi2, pypi3, pypi4, pypi5, pypi6 = st.columns(6)
    with pypi1:
        badge(type="pypi", name="streamlit")
    with pypi2:
        badge(type="pypi", name="apsw")
    with pypi3:
        badge(type="pypi", name="pandas")
    with pypi4:
        badge(type="pypi", name="streamlit_antd_components")
    with pypi5:
        badge(type="pypi", name="spark_ai_python")
    with pypi6:
        badge(type="pypi", name="qianfan")
    #badge(type="github", name="simonpek88/ETest-SQLite ")


def aboutLicense():
    st.subheader("License", divider="green")
    st.markdown('''
        MIT License

        Copyright (c) 2024 :blue[Simon Lau] TradeMark :rainbow[Enjoy for AP] ‚Ñ¢

        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:

        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        ''')


def actDelTable():
    for each in st.session_state.keys():
        if each.startswith("delStaticExamTable_"):
            if st.session_state[each]:
                each = each.replace("delStaticExamTable_", "")
                mdb_del(conn, cur, SQL=f"DROP TABLE IF EXISTS {each}")
                st.info(f"{each} ÈùôÊÄÅÈ¢òÂ∫ìÂà†Èô§ÊàêÂäü")


def delStaticExamTable():
    flagExistTable = False
    SQL = "SELECT name from sqlite_master where type = 'table' and name like 'exam_%'"
    tempTable = mdb_sel(cur, SQL)
    if tempTable:
        st.subheader("Âà†Èô§ÈùôÊÄÅÈ¢òÂ∫ì", divider="red")
        for row in tempTable:
            if row[0].count("_") == 2:
                st.checkbox(f"{row[0]}", key=f"delStaticExamTable_{row[0]}")
                flagExistTable = True
    if flagExistTable:
        st.button("Á°ÆËÆ§Âà†Èô§", on_click=actDelTable)
    else:
        st.info("ÊöÇÊó†ÈùôÊÄÅÈ¢òÂ∫ì")


def resultExcel():
    st.subheader("ËØïÂç∑ÂØºÂá∫", divider="blue")
    examResultPack, examResultPack2 = [], []
    SQL = "SELECT name from sqlite_master where type = 'table' and name like 'exam_final_%'"
    tempTable = mdb_sel(cur, SQL)
    if tempTable:
        for row in tempTable:
            examResultPack2.append(row[0])
            tmp = row[0][:row[0].rfind("_")]
            tmp = tmp[tmp.rfind("_") + 1:]
            SQL = "SELECT userCName from user where userName = " + str(tmp)
            tempTable = mdb_sel(cur, SQL)
            if tempTable:
                tempUserCName = tempTable[0][0]
                examResultPack.append(row[0].replace("exam_final_", "").replace(tmp, tempUserCName))
            else:
                examResultPack.append(row[0].replace("exam_final_", ""))
        examResult = st.selectbox(" ", examResultPack, index=None, label_visibility="collapsed")

        if examResult:
            for index, value in enumerate(examResultPack):
                if value == examResult:
                    examResult = examResultPack2[index]
                    break
            SQL = f"SELECT Question, qOption, qAnswer, qType, qAnalysis, userAnswer from {examResult} order by ID"
            rows = mdb_sel(cur, SQL)
            if rows:
                df = pd.DataFrame(rows)
                df.columns = ["È¢òÁõÆ", "ÈÄâÈ°π", "Ê†áÂáÜÁ≠îÊ°à", "Á±ªÂûã", "Ëß£Êûê", "‰Ω†ÁöÑÁ≠îÊ°à"]
                st.dataframe(df)
    else:
        st.info("ÊöÇÊó†ËØïÂç∑")


def examResulttoExcel():
    searchOption = []
    SQL = f"SELECT ID, examName from examidd where StationCN = '{st.session_state.StationCN}' order by ID"
    rows = mdb_sel(cur, SQL)
    for row in rows:
        searchOption.append(row[1])
    searchExamName = st.selectbox("ËØ∑ÈÄâÊã©ËÄÉËØïÂú∫Ê¨°", searchOption, index=None)
    options = st.multiselect("Êü•ËØ¢Á±ªÂûã", ["ÈÄöËøá", "Êú™ÈÄöËøá"], default=["ÈÄöËøá", "Êú™ÈÄöËøá"])
    if searchExamName:
        searchButton = st.button("ÂØºÂá∫‰∏∫ExcelÊñá‰ª∂")
        if searchButton and searchExamName:
            if options:
                SQL = "SELECT ID, userName, userCName, examScore, examDate, examPass from examresult where examName = '" + searchExamName + "' and ("
                for each in options:
                    if each == "ÈÄöËøá":
                        SQL = SQL + " examPass = 1 or "
                    elif each == "Êú™ÈÄöËøá":
                        SQL = SQL + " examPass = 0 or "
                if SQL.endswith(" or "):
                    SQL = SQL[:-4] + ") order by ID"
                rows = mdb_sel(cur, SQL)
                outputFile = f"./ExamResult/{searchExamName}_{time.strftime('%Y%m%d%H%M%S', time.localtime(int(time.time())))}.xlsx"
                if os.path.exists(outputFile):
                    os.remove(outputFile)
                workbook = Workbook(outputFile)
                worksheet = workbook.add_worksheet(f"{searchExamName}ËÄÉËØïÊàêÁª©")
                k = 1
                title = ["ID", "ÁºñÁ†Å", "ÂßìÂêç", "ÊàêÁª©", "ËÄÉËØïÊó∂Èó¥", "ËÄÉËØïÁªìÊûú"]
                for index, value in enumerate(title):
                    worksheet.write(0, index, value)
                k = 1
                for i, row in enumerate(rows):
                    for j, value in enumerate(row):
                        if j == 0:
                            value = k
                        if j == 4:
                            value = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(int(value)))
                        elif j == 5:
                            value = "ÈÄöËøá" if value == 1 else "Êú™ÈÄöËøá"
                        worksheet.write(i + 1, j, value)
                    k = k + 1
                workbook.close()
                if os.path.exists(outputFile):
                    st.success(f":green[[{searchExamName}]] :gray[ËÄÉËØïÊàêÁª©ÊàêÂäüÂØºÂá∫Ëá≥Á®ãÂ∫èÁõÆÂΩï‰∏ã] :orange[{outputFile[2:]}]")
                else:
                    st.warning(f":red[[{searchExamName}]] ËÄÉËØïÊàêÁª©ÂØºÂá∫Â§±Ë¥•")


def ClearTables():
    SQL = "DELETE from questions where rowid NOT IN (SELECT Min(rowid) from questions GROUP BY Question, qType, StationCN, chapterName)"
    mdb_del(conn, cur, SQL)
    SQL = "DELETE from commquestions where rowid NOT IN (SELECT Min(rowid) from commquestions GROUP BY Question, qType)"
    mdb_del(conn, cur, SQL)
    SQL = "DELETE from morepractise where rowid NOT IN (SELECT Min(rowid) from morepractise GROUP BY Question, qType, userName)"
    mdb_del(conn, cur, SQL)
    SQL = "DELETE from questionaff where rowid NOT IN (SELECT Min(rowid) from questionaff GROUP BY chapterName, StationCN)"
    mdb_del(conn, cur, SQL)
    SQL = "DELETE from questionaff where chapterName <> 'ÂÖ¨ÂÖ±È¢òÂ∫ì' and chapterName <> 'ÈîôÈ¢òÈõÜ' and chapterName not in (SELECT DISTINCT(chapterName) from questions)"
    mdb_del(conn, cur, SQL)
    for each in ["questions", "commquestions", "morepractise"]:
        mdb_modi(conn, cur, SQL=f"update {each} set Question = REPLACE(Question,'\n', '')")
    st.toast("Á´ôÂÆ§È¢òÂ∫ì/ÂÖ¨ÂÖ±È¢òÂ∫ì/ÈîôÈ¢òÈõÜ/Á´†ËäÇ‰ø°ÊÅØÂ∫ì ËÆ∞ÂΩïÊ∏ÖÁêÜÂÆåÊàê")


def questoWord():
    allType, validType, stationCName = [], [], []
    st.subheader("È¢òÂ∫ìÂØºÂá∫", divider="blue")
    SQL = f"SELECT paramName, param from setup_{st.session_state.StationCN} where paramType = 'questype'"
    rows = mdb_sel(cur, SQL)
    for row in rows:
        allType.append(row[0])
        if row[1] == 1:
            validType.append(row[0])
    quesTable = st.selectbox("ËØ∑ÈÄâÊã©ÂäüËÉΩÁ±ªÂûã", ("Á´ôÂÆ§È¢òÂ∫ì", "ÂÖ¨ÂÖ±È¢òÂ∫ì", "ËØïÂç∑", "ÈîôÈ¢òÈõÜ"), index=None)
    quesType = st.multiselect("È¢òÂûã", allType, default=allType)
    stationCN, headerExamName = "ÂÖ®Á´ô", ""
    if quesTable == "Á´ôÂÆ§È¢òÂ∫ì" or quesTable == "ÈîôÈ¢òÈõÜ":
        stationCName.append("ÂÖ®Á´ô")
        SQL = "SELECT Station from stations order by ID"
        rows = mdb_sel(cur, SQL)
        for row in rows:
            stationCName.append(row[0])
        stationCN = st.select_slider("Á´ôÂÆ§", stationCName, value=st.session_state.StationCN)
    elif quesTable == "ËØïÂç∑":
        headerExamName = st.text_input("ËØ∑ËÆæÁΩÆËØïÂç∑ÂêçÁß∞", max_chars=20, help="Êñá‰ª∂Êä¨Â§¥ÊòæÁ§∫ÁöÑËØïÂç∑ÂêçÁß∞, ‰∏çÂ°´Âàô‰ΩøÁî®ÈªòËÆ§ÂêçÁß∞")
        if "examFinalTable" in st.session_state:
            stationCN = st.session_state.StationCN
            tablename = st.session_state.examFinalTable
            st.write("üì¢:red[ËØïÂç∑È¢òÂ∫ìÂ¶ÇÊûúÂØºÂá∫Êñá‰ª∂‰∏≠‰∏çÂåÖÂê´ËÆæÁΩÆÁöÑÈ¢òÂûã, ËØ∑Âú®ÂäüËÉΩüëâÂèÇÊï∞ËÆæÁΩÆüëâÈ¢òÂûãËÆæÁΩÆüëâÈáçÊñ∞ËÆæÁΩÆÂêéÂÜçÁîüÊàêÈ¢òÂ∫ìÂêéÂØºÂá∫, ÂÖ∂‰ªñÁ±ªÂûãÈ¢òÂ∫ìÊ≤°ÊúâÊ≠§ÈôêÂà∂. ‰∏ãÈù¢ÁöÑËÆæÁΩÆÊòØ‰∏™Â±ïÁ§∫, Êó†Ê≥ïÁÇπÂáªÂíå‰øÆÊîπ]üòä")
            st.image("./Images/dbsetup.png", caption="Êõ¥ÊîπËÆæÁΩÆÁ§∫‰æã")
        else:
            st.warning("ËØ∑ÂÖàÁîüÊàêÈ¢òÂ∫ì")
            quesTable = ""
    sac.switch(label="Â§çÊ†∏Ê®°Âºè", on_label="On", align='start', size='md', value=False, key="sac_recheck")
    if quesTable and quesType:
        buttonSubmit = st.button("ÂØºÂá∫‰∏∫WordÊñá‰ª∂")
        if buttonSubmit:
            if quesTable == "Á´ôÂÆ§È¢òÂ∫ì":
                tablename = "questions"
            elif quesTable == "ÂÖ¨ÂÖ±È¢òÂ∫ì":
                tablename = "commquestions"
            elif quesTable == "ËØïÂç∑":
                tablename = st.session_state.examFinalTable
            elif quesTable == "ÈîôÈ¢òÈõÜ":
                tablename = "morepractise"
            headerFS = getParam("Êä¨Â§¥Â≠ó‰ΩìÂ§ßÂ∞è", st.session_state.StationCN)
            titleFS = getParam("È¢òÂûãÂ≠ó‰ΩìÂ§ßÂ∞è", st.session_state.StationCN)
            quesFS = getParam("È¢òÁõÆÂ≠ó‰ΩìÂ§ßÂ∞è", st.session_state.StationCN)
            optionFS = getParam("ÈÄâÈ°πÂ≠ó‰ΩìÂ§ßÂ∞è", st.session_state.StationCN)
            answerFS = getParam("Â§çÊ†∏‰ø°ÊÅØÂ≠ó‰ΩìÂ§ßÂ∞è", st.session_state.StationCN)
            quesDOC = Document()
            quesDOC.styles["Normal"].font.name = "Microsoft YaHei"
            quesDOC.styles["Normal"]._element.rPr.rFonts.set(qn("w:eastAsia"), "Microsoft YaHei")
            option, radioOption = ["A", "B", "C", "D", "E", "F", "G", "H"], ["Ê≠£Á°Æ", "ÈîôËØØ"]
            blank = f"({' ' * 20})"
            pHeader = quesDOC.add_paragraph()
            pHeader.alignment = WD_ALIGN_PARAGRAPH.CENTER
            textHeader = pHeader.add_run(f"{st.session_state.StationCN} {headerExamName} {quesTable}", 0)
            #textHeader.font.name = "Microsoft YaHei"
            #textHeader.element.rPr.rFonts.set(qn("w:eastAsia"), "Microsoft YaHei")
            textHeader.font.size = Pt(headerFS)
            textHeader.font.bold = True
            textHeader.font.color.rgb = RGBColor(40, 106, 205)
            for each in quesType:
                if quesTable == "Á´ôÂÆ§È¢òÂ∫ì" or quesTable == "ÈîôÈ¢òÈõÜ":
                    if stationCN == "ÂÖ®Á´ô":
                        SQL = f"SELECT Question, qOption, qAnswer, qType, ID, SourceType from {tablename} where qType = '{each}' order by ID"
                    else:
                        SQL = f"SELECT Question, qOption, qAnswer, qType, ID, SourceType from {tablename} where qType = '{each}' and StationCN = '{stationCN}' order by ID"
                else:
                    SQL = f"SELECT Question, qOption, qAnswer, qType, ID, SourceType from {tablename} where qType = '{each}' order by ID"
                rows = mdb_sel(cur, SQL)
                #st.write(f"{each} ÂÖ± {len(rows)}")
                i = 1
                if rows:
                    pTitle = quesDOC.add_paragraph()
                    textTitle = pTitle.add_run(f"{each}", 0)
                    #textTitle.font.name = "Microsoft YaHei"
                    #textTitle.element.rPr.rFonts.set(qn("w:eastAsia"), "Microsoft YaHei")
                    textTitle.font.size = Pt(titleFS)
                    textTitle.bold = True
                    for row in rows:
                        tmp, answer, qa, aa = "", "", [], []
                        pQues = quesDOC.add_paragraph()
                        if each == "Â°´Á©∫È¢ò":
                            textQues = pQues.add_run(f"Á¨¨{i}È¢ò   {row[0].replace('()', blank).replace('ÔºàÔºâ', blank)}", 0)
                        else:
                            textQues = pQues.add_run(f"Á¨¨{i}È¢ò   {row[0]}   ({' ' * 8})", 0)
                        #textQues.font.name = "Microsoft YaHei"
                        #textQues.element.rPr.rFonts.set(qn("w:eastAsia"), "Microsoft YaHei")
                        textQues.font.size = Pt(quesFS)
                        #if st.session_state.sac_recheck and row[5] == "AI-LLM":
                        #textQues.font.color.rgb = RGBColor(155, 17, 30)
                        aa = row[2].replace("Ôºõ", ";").split(";")
                        if each != "Â°´Á©∫È¢ò":
                            pOption = quesDOC.add_paragraph()
                        if each == "ÂçïÈÄâÈ¢ò" or each == "Â§öÈÄâÈ¢ò":
                            qa = row[1].replace("Ôºõ", ";").split(";")
                            for each2 in qa:
                                tmp = tmp + f"{option[qa.index(each2)]}. {each2}{' ' * 8}"
                            textOption = pOption.add_run(tmp)
                        elif each == "Âà§Êñ≠È¢ò":
                            textOption = pOption.add_run(f"A. Ê≠£Á°Æ{' ' * 15}B. ÈîôËØØ{' ' * 15}")
                        #textOption.font.name = "Microsoft YaHei"
                        #textOption.element.rPr.rFonts.set(qn("w:eastAsia"), "Microsoft YaHei")
                        textOption.font.size = Pt(optionFS)
                        #textOption.italic = True
                        if st.session_state.sac_recheck:
                            if each == "ÂçïÈÄâÈ¢ò" or each == "Â§öÈÄâÈ¢ò":
                                for each3 in aa:
                                    answer = answer + f"{option[int(each3)]}" + ", "
                            elif each == "Âà§Êñ≠È¢ò":
                                answer = radioOption[int(aa[0]) ^ 1]
                            elif each == "Â°´Á©∫È¢ò":
                                for index, value in enumerate(aa):
                                    answer = answer + f"{chr(49 + index)}.  [{value}]" + " "
                            if answer.endswith(", "):
                                answer = answer[:-2]
                            elif answer.endswith(" "):
                                answer = answer[:-1]
                            pAnswer = quesDOC.add_paragraph()
                            textAnswer = pAnswer.add_run(f"Â§çÊ†∏Ê®°Âºè ID: {row[4]} Ê≠£Á°ÆÁ≠îÊ°à: {answer}")
                            textAnswer.font.size = Pt(answerFS)
                            textAnswer.font.bold = True
                            textAnswer.font.color.rgb = RGBColor(155, 17, 30)
                            if stationCN != "ÂÖ®Á´ô":
                                SQL = f"SELECT chapterName from questions where Question = '{row[0]}'"
                            else:
                                SQL = f"SELECT chapterName from questions where Question = '{row[0]}' and StationCN = '{stationCN}'"
                            tempTable = mdb_sel(cur, SQL)
                            if tempTable:
                                fhQT = tempTable[0][0]
                            else:
                                SQL = f"SELECT ID from commquestions where Question = '{row[0]}'"
                                if mdb_sel(cur, SQL):
                                    fhQT = "ÂÖ¨ÂÖ±È¢òÂ∫ì"
                            pSource = quesDOC.add_paragraph()
                            if row[5] != "AI-LLM":
                                textSource = pSource.add_run(f"ËØïÈ¢òÊù•Ê∫ê: [{stationCN}] Á´†ËäÇÂêçÁß∞: [{fhQT}] ËØïÈ¢òÁîüÊàêÁ±ªÂà´: [{row[5]}]")
                            else:
                                textSource = pSource.add_run(f"ËØ∑ÁâπÂà´Ê≥®ÊÑè ËØïÈ¢òÊù•Ê∫ê: [{stationCN}] Á´†ËäÇÂêçÁß∞: [{fhQT}] ËØïÈ¢òÁîüÊàêÁ±ªÂà´: [{row[5]}]")
                            textSource.font.bold = True
                            textSource.font.size = Pt(answerFS)
                            if row[5] == "AI-LLM":
                                textSource.font.color.rgb = RGBColor(155, 17, 30)
                                textSource.font.underline = True
                            #textSource.font.italic = True
                        i += 1
            if headerExamName != "":
                outputFile = f"./QuesDoc/{st.session_state.StationCN}-{headerExamName}-{quesTable}_{time.strftime('%Y%m%d%H%M%S', time.localtime(int(time.time())))}.docx"
            else:
                outputFile = f"./QuesDoc/{st.session_state.StationCN}-{quesTable}_{time.strftime('%Y%m%d%H%M%S', time.localtime(int(time.time())))}.docx"
            if os.path.exists(outputFile):
                os.remove(outputFile)
            quesDOC.save(outputFile)
            if os.path.exists(outputFile):
                st.success(f":green[[{quesTable}]] :gray[È¢òÂ∫ìÊàêÂäüÂØºÂá∫Ëá≥Á®ãÂ∫èÁõÆÂΩï‰∏ã] :orange[{outputFile[2:]}]")
            else:
                st.warning(f":red[[{quesTable}]] È¢òÂ∫ìÂØºÂá∫Â§±Ë¥•")


def dboutput():
    bc = sac.segmented(
        items=[
            sac.SegmentedItem(label="È¢òÂ∫ìÂØºÂá∫(WordÊ†ºÂºè)", icon="database-down"),
            sac.SegmentedItem(label="ËØïÂç∑ÂØºÂá∫(DFÊ†ºÂºè)", icon="journal-arrow-down"),
            sac.SegmentedItem(label="ËÄÉËØïÊàêÁª©ÂØºÂá∫(ExcelÊ†ºÂºè)", icon="layout-text-sidebar-reverse"),
        ], color="green", align="center"
    )
    if bc == "È¢òÂ∫ìÂØºÂá∫(WordÊ†ºÂºè)":
        questoWord()
    elif bc == "ËØïÂç∑ÂØºÂá∫(DFÊ†ºÂºè)":
        resultExcel()
    elif bc == "ËÄÉËØïÊàêÁª©ÂØºÂá∫(ExcelÊ†ºÂºè)":
        examResulttoExcel()


def dbinputSubmit(tarTable, orgTable):
    tmpTable = ""
    if tarTable == "Á´ôÂÆ§È¢òÂ∫ì":
        tablename = "questions"
        SQL = f"INSERT INTO {tablename}(Question, qOption, qAnswer, qType, qAnalysis, StationCN, chapterName, SourceType) VALUES (?, ?, ?, ?, ?, ?, ?, ?)"
        maxcol = 8
    elif tarTable == "ÂÖ¨ÂÖ±È¢òÂ∫ì":
        tablename = "commquestions"
        SQL = f"INSERT INTO {tablename}(Question, qOption, qAnswer, qType, qAnalysis, SourceType) VALUES (?, ?, ?, ?, ?, ?)"
        maxcol = 6
    st.spinner(f"Ê≠£Âú®Âêë [{tarTable}] ÂØºÂÖ•È¢òÂ∫ì...")
    for each in orgTable:
        listinsheet = openpyxl.load_workbook(f"./InputQues/{each}.xlsx")
        datainlist = listinsheet.active
        for row in datainlist.iter_rows(min_row=2, max_col=maxcol, max_row=datainlist.max_row):
            singleQues = [cell.value for cell in row]
            cur.execute(SQL, singleQues)
        listinsheet.close()
        tmpTable = tmpTable + each + ", "
    SQL = f"UPDATE {tablename} set qOption = '' where qOption is Null"
    mdb_modi(conn, cur, SQL)
    SQL = f"UPDATE {tablename} set qAnalysis = '' where qAnalysis is Null"
    mdb_modi(conn, cur, SQL)
    SQL = f"UPDATE {tablename} set SourceType = '‰∫∫Â∑•' where SourceType is Null"
    mdb_modi(conn, cur, SQL)
    SQL = "INSERT INTO questionaff(chapterName, StationCN, chapterRatio) SELECT DISTINCT chapterName, StationCN, 5 FROM questions"
    mdb_ins(conn, cur, SQL)
    ClearTables()
    st.success(f":green[[{tmpTable[:-2]}] Âêë [{tarTable}]] :gray[ÂØºÂÖ•ÊàêÂäü]")


def dbinput():
    inputOption = []
    targetTable = st.radio("ÂØºÂÖ•Ëá≥:", ("Á´ôÂÆ§È¢òÂ∫ì", "ÂÖ¨ÂÖ±È¢òÂ∫ì"), index=None, horizontal=True)
    if targetTable:
        for root, dirs, files in os.walk("./InputQues"):
            for file in files:
                if os.path.splitext(file)[1].lower() == '.xlsx' and os.path.splitext(file)[0].endswith(f"_{targetTable}"):
                    inputOption.append(os.path.splitext(file)[0])
        if inputOption:
            orgTable = st.multiselect("ËØ∑ÈÄâÊã©ÂØºÂÖ•Êñá‰ª∂", inputOption, default=None)
            if orgTable:
                st.button("ÂØºÂÖ•", on_click=dbinputSubmit, args=(targetTable, orgTable))
            else:
                st.warning("ËØ∑ÈÄâÊã©Ë¶ÅÂØºÂÖ•ÁöÑÊñá‰ª∂")
        else:
            st.warning("Ê≤°ÊúâÂèØÂØºÂÖ•ÁöÑÊñá‰ª∂")
    else:
        st.write("ËØ∑ÈÄâÊã©Ë¶ÅÂØºÂÖ•ÁöÑÈ¢òÂ∫ì")


def dbfunc():
    bc = sac.segmented(
        items=[
            sac.SegmentedItem(label="A.I.Âá∫È¢ò", icon="robot"),
            sac.SegmentedItem(label="È¢òÂ∫ìÂØºÂÖ•", icon="database-up"),
            #sac.SegmentedItem(label="WordÊñá‰ª∂ÂØºÂÖ•", icon="text-wrap", disabled=st.session_state.debug ^ True),
            sac.SegmentedItem(label="Âà†Èô§Âçï‰∏™ËØïÈ¢ò", icon="x-circle"),
            sac.SegmentedItem(label="ÈîôÈ¢òÈõÜÈáçÁΩÆ", icon="journal-x"),
            sac.SegmentedItem(label="Âà†Èô§ÈùôÊÄÅÈ¢òÂ∫ì", icon="trash3"),
            #sac.SegmentedItem(label="ÈáçÁΩÆÈ¢òÂ∫ìID", icon="bootstrap-reboot", disabled=st.session_state.debug ^ True),
        ], align="start", color="red"
    )
    if bc == "A.I.Âá∫È¢ò":
        AIGenerQues()
    elif bc == "È¢òÂ∫ìÂØºÂÖ•":
        dbinput()
    elif bc == "WordÊñá‰ª∂ÂØºÂÖ•":
        inputWord()
    elif bc == "Âà†Èô§Âçï‰∏™ËØïÈ¢ò":
        deleteSingleQues()
    elif bc == "Ê∏ÖÁ©∫ÈîôÈ¢òÈõÜ":
        ClearMP()
    elif bc == "Âà†Èô§ÈùôÊÄÅÈ¢òÂ∫ì":
        delStaticExamTable()
    elif bc == "ÈáçÁΩÆÈ¢òÂ∫ìID":
        buttonReset = st.button("ÈáçÁΩÆID", type="primary")
        if buttonReset:
            st.button("Á°ÆËÆ§ÈáçÁΩÆ", type="secondary", on_click=resetTableID)


def deleteSingleQues():
    tablename = st.selectbox("ËØ∑ÈÄâÊã©Ë¶ÅÂà†Èô§:red[Âçï‰∏™ËØïÈ¢ò]ÊâÄÂú®ÁöÑÈ¢òÂ∫ì", ("Á´ôÂÆ§È¢òÂ∫ì", "ÂÖ¨ÂÖ±È¢òÂ∫ì", "ÈîôÈ¢òÈõÜ"), index=None)
    if tablename:
        st.number_input("ËØ∑ËæìÂÖ•Ë¶ÅÂà†Èô§ÁöÑËØïÈ¢òID", min_value=1, max_value=999999, placeholder="ÊØè‰∏™È¢òÂ∫ìËØïÈ¢òÁöÑIDÈÉΩ‰∏ç‰∏ÄÊ†∑, Áõ∏ÂêåIDÂèØ‰ª•Âú®‰∏çÂêåÈ¢òÂ∫ì, ‰∏ÄÂÆöË¶ÅÊ£ÄÊü•È¢òÂ∫ìÂíåIDÊòØÂê¶‰∏ÄËá¥", key="delQuesID")
        buttonConfirm = st.button("Âà†Èô§", type="primary")
        if buttonConfirm:
            st.button("Á°ÆËÆ§Âà†Èô§", type="secondary", on_click=deleteQues, args=(tablename,))


def deleteQues(tablename):
    if tablename == "Á´ôÂÆ§È¢òÂ∫ì":
        targetTable = "questions"
    elif tablename == "ÂÖ¨ÂÖ±È¢òÂ∫ì":
        targetTable = "commquestions"
    elif tablename == "ÈîôÈ¢òÈõÜ":
        targetTable = "morepractise"
    SQL = f"DELETE from {targetTable} where ID = {st.session_state.delQuesID}"
    mdb_modi(conn, cur, SQL)
    st.success(f"Â∑≤ :red[Âà†Èô§] {tablename} ‰∏≠ID‰∏∫ {st.session_state.delQuesID} ÁöÑËØïÈ¢ò")


def inputWord():
    #doc = Document("./QuesRefer/ÁâπÁßçËÆæÂ§áÂÆâÂÖ®ÁÆ°ÁêÜÂëòËÄÉËØïÈ¢òÂ∫ìÁ≤æÈÄâÂÖ®Êñá.docx")
    #doc = Document("./QuesRefer/(Êñ∞Áâà)ÁâπÁßçËÆæÂ§áÂÆâÂÖ®ÁÆ°ÁêÜ‰∫∫Âëò(ÁâπÁßç‰Ωú‰∏ö)ËÄÉËØïÈ¢òÂ∫ì.docx")
    #doc = Document("./QuesRefer/(Êñ∞Áâà)ÁâπÁßçËÆæÂ§áÂÆâÂÖ®ÁÆ°ÁêÜ‰∫∫ÂëòËµÑÊ†º(ÁâπÁßç‰Ωú‰∏ö)ËÄÉËØïÈ¢òÂ∫ì(ÂÖ®ÁúüÈ¢òÂ∫ì).docx")
    #doc = Document("./QuesRefer/2023Âπ¥ÂÖ®ÂõΩÁâπÁßçËÆæÂ§á‰Ωú‰∏ö‰∫∫ÂëòËÄÉËØïÈ¢òÂ∫ìÈôÑÁ≠îÊ°à.docx")
    doc = Document("./QuesRefer/2023Âπ¥ÁâπÁßçËÆæÂ§á‰Ωú‰∏öÂÆâÂÖ®ÁÆ°ÁêÜ‰∫∫ÂëòËØÅËÄÉËØïÈ¢òÂ∫ì(ÈÄöÁî®Áâà).docx")
    chapter = "ÁâπÁßçËÆæÂ§áÂÆâÂÖ®ÁÆ°ÁêÜÂëò"
    #title_rule = re.compile("\\d+„ÄÅ")
    title_rule = re.compile("\\d+.")
    option_rule = re.compile("\\w+„ÄÅ")
    ques, qAnswer, temp2, generQuesCount, qType = "", "", "", 0, ""
    if st.session_state.debug:
        os.system("cls")
    st.spinner("Ê≠£Âú®ÂØºÂÖ•WordÊñá‰ª∂...")
    for i, paragraph in enumerate(doc.paragraphs[:]):
        line = paragraph.text.replace('\n', '').replace('\r', '').replace("Ôºà", "(").replace("Ôºâ", ")").strip()
        if line:
            #if title_rule.search(line):
            if line[:7].find(".") != -1:
                if temp2.endswith(";"):
                    temp2 = temp2[:-1]
                    qOption = temp2
                    temp2 = ""
                if ques != "" and qAnswer != "" and qOption != "":
                    if qOption.find("Ê≠£Á°Æ;ÈîôËØØ") != -1:
                        qType = "Âà§Êñ≠È¢ò"
                        qAnswer = int(qAnswer) ^ 1
                        qOption = ""
                    elif len(qAnswer) == 1:
                        qType = "ÂçïÈÄâÈ¢ò"
                    elif len(qAnswer) > 1:
                        qType = "Â§öÈÄâÈ¢ò"
                    if st.session_state.debug:
                        print(f"Record: Q: {ques} T: {qType} O: {qOption} A: {qAnswer}")
                    SQL = f"SELECT ID from questions where Question = '{ques}' and qType = '{qType}' and StationCN = '{st.session_state.StationCN}' and chapterName = '{chapter}'"
                    if not mdb_sel(cur, SQL):
                        SQL = f"INSERT INTO questions(Question, qOption, qAnswer, qType, StationCN, chapterName, SourceType) VALUES ('{ques}', '{qOption}', '{qAnswer}', '{qType}', '{st.session_state.StationCN}', '{chapter}', '‰∫∫Â∑•')"
                        mdb_ins(conn, cur, SQL)
                        generQuesCount += 1
                    ques, qAnswer, qOption = "", "", ""
                temp = ""
                if st.session_state.debug:
                    print(f"Ques:{line}")
                if line[:7].find("„ÄÅ") != -1:
                    ques = line[line.find("„ÄÅ") + 1:]
                elif line[:7].find(".") != -1:
                    ques = line[line.find(".") + 1:]
                if ques.startswith("."):
                    ques = ques[1:]
                qAnswer = ""
                while True:
                    b1 = line.find('(')
                    b2 = line.find(')')
                    if b1 != -1 and b2 != -1 and line[b1 + 1:b1 + 2] in ["A", "B", "C", "D", "E", "F"]:
                        temp = line[b1 + 1:b2]
                        ques = ques.replace(temp, " " * len(temp))
                        temp = temp.replace("„ÄÅ", "")
                        for each in temp:
                            qAnswer = qAnswer + str(ord(each) - 65) + ";"
                        line = line[b2 + 1:]
                    else:
                        break
                if qAnswer.endswith(";"):
                    qAnswer = qAnswer[:-1]
            elif option_rule.search(line):
                if st.session_state.debug:
                    print(f"{line}")
                temp2 = temp2 + line[2:] + ";"
            elif line.find("Ê≠£Á°ÆÁ≠îÊ°àÔºö") != -1:
                print(line)
                temp = line[line.find("Ê≠£Á°ÆÁ≠îÊ°àÔºö") + 5:]
                for each in temp:
                    qAnswer = qAnswer + str(ord(each) - 65) + ";"
                if qAnswer.endswith(";"):
                    qAnswer = qAnswer[:-1]
        else:
            continue
    ClearTables()
    st.success(f"ÂÖ±ÁîüÊàê{generQuesCount}ÈÅìËØïÈ¢ò")


def resetTableID():
    for tablename in ["questions", "commquestions", "morepractise", "questionaff", "studyinfo", "setup_ÈªòËÆ§", f"setup_{st.session_state.StationCN}"]:
        SQL = f"SELECT ID from {tablename} order by ID"
        rows = mdb_sel(cur, SQL)
        for i, row in enumerate(rows):
            SQL = f"UPDATE {tablename} set ID = {i + 1} where ID = {row[0]}"
            mdb_modi(conn, cur, SQL)
    st.success("È¢òÂ∫ìIDÈáçÁΩÆÊàêÂäü")


def AIGenerQues():
    quesPack, chars, chapterPack, dynaQuesType, generQuesCount = [], ["A", "B", "C", "D", "E", "F", "G", "H"], [], ["ÂçïÈÄâÈ¢ò", "Â§öÈÄâÈ¢ò", "Âà§Êñ≠È¢ò", "Â°´Á©∫È¢ò"], 0
    StationCNPack, chosenStationCN = [], st.session_state.StationCN
    temp = "Á´ôÂÆ§È¢òÂ∫ìÁé∞Êúâ: "
    for each in dynaQuesType:
        SQL = f"SELECT Count(ID) from questions where qType = '{each}'"
        qCount = mdb_sel(cur, SQL)[0][0]
        temp = temp + "[:red[" + each + "]] " + str(qCount) + "ÈÅì "
    temp = temp + "\n\nÂÖ¨ÂÖ±È¢òÂ∫ìÁé∞Êúâ: "
    for each in dynaQuesType:
        SQL = f"SELECT Count(ID) from commquestions where qType = '{each}'"
        qCount = mdb_sel(cur, SQL)[0][0]
        temp = temp + "[:red[" + each + "]] " + str(qCount) + "ÈÅì "
    temp = temp.strip()
    st.caption(temp)
    table = st.radio(label="ËØ∑ÈÄâÊã©Ë¶ÅÁîüÊàêÁöÑÈ¢òÂ∫ì", options=("Á´ôÂÆ§È¢òÂ∫ì", "ÂÖ¨ÂÖ±È¢òÂ∫ì"), horizontal=True, index=None)
    if table and table != "ÂÖ¨ÂÖ±È¢òÂ∫ì":
        SQL = "SELECT Station from stations order by ID"
        rows = mdb_sel(cur, SQL)
        for row in rows:
            StationCNPack.append(row[0])
        chosenStationCN = st.select_slider("ËØ∑ÈÄâÊã©Ë¶ÅÂØºÂÖ•ÁöÑÁ´ôÂÆ§", options=StationCNPack, value=st.session_state.StationCN)
        col1, col2 = st.columns(2)
        SQL = f"SELECT chapterName from questionaff where StationCN = '{chosenStationCN}' and chapterName <> 'ÂÖ¨ÂÖ±È¢òÂ∫ì' and chapterName <> 'ÈîôÈ¢òÈõÜ'"
        rows = mdb_sel(cur, SQL)
        for row in rows:
            chapterPack.append(row[0])
        with col1:
            chapter = st.selectbox(label="ËØ∑ÈÄâÊã©Á´†ËäÇ", options=chapterPack, index=None)
        with col2:
            textChapter = st.text_input("ËØ∑ËæìÂÖ•Êñ∞Á´†ËäÇÂêçÁß∞", value="", placeholder="Ê∑ªÂä†Êñ∞ÁöÑÁ´†ËäÇ")
            textChapter = textChapter.strip()
    elif table == "ÂÖ¨ÂÖ±È¢òÂ∫ì":
        chapter, textChapter = "", ""
    quesRefer = st.text_area("ËØ∑ËæìÂÖ•ÂèÇËÄÉËµÑÊñô")
    quesType = st.radio(label="ËØ∑ÈÄâÊã©Ë¶ÅÁîüÊàêÁöÑÈ¢òÂûã", options=("ÂçïÈÄâÈ¢ò", "Â§öÈÄâÈ¢ò", "Âà§Êñ≠È¢ò", "Â°´Á©∫È¢ò"), index=None, horizontal=True)
    quesCount = st.number_input("ËØ∑ËæìÂÖ•Ë¶ÅÁîüÊàêÁöÑÈ¢òÁõÆÊï∞Èáè", min_value=1, max_value=10, value=5, step=1)
    if table is not None and quesRefer != "" and quesType is not None:
        buttonGener = st.button("ÁîüÊàêËØïÈ¢ò")
        if buttonGener:
            if chapter is None and textChapter != "":
                SQL = f"SELECT ID from questionaff where chapterName = '{textChapter}' and StationCN = '{chosenStationCN}'"
                if not mdb_sel(cur, SQL):
                    SQL = f"INSERT INTO questionaff(chapterName, StationCN, chapterRatio) VALUES ('{textChapter}', '{chosenStationCN}', 5)"
                    mdb_ins(conn, cur, SQL)
                    st.toast(f"Êñ∞ÁöÑÁ´†ËäÇ: :red[{textChapter}]Ê∑ªÂä†ÂÆåÊØï")
                chapter = textChapter
            if chapter is not None and table == "Á´ôÂÆ§È¢òÂ∫ì" or table == "ÂÖ¨ÂÖ±È¢òÂ∫ì":
                outputFile = f"./outputQues/{chosenStationCN}-{table}-{chapter}-{quesType}_{time.strftime('%Y%m%d%H%M%S', time.localtime(int(time.time())))}.txt"
                if os.path.exists(outputFile):
                    os.remove(os.path)
                if st.session_state.debug:
                    os.system("cls")
                generQuesCount, displayQues = 0, ""
                infoArea = st.empty()
                with infoArea.container():
                    st.info("Ê≠£Âú®‰ΩøÁî® :red[ÊñáÂøÉÂçÉÂ∏ÜÂ§ßÊ®°Âûã] ËøõË°åËØïÈ¢òÁîüÊàê, ËØ∑Á®çÁ≠â...")
                ques = qianfan_AI_GenerQues(quesRefer, quesType, quesCount, "ERNIE-Speed-8K")
                quesPack = ques.split("È¢òÂûã")
                for each in quesPack:
                    if each != "":
                        quesHeader, qOption, Option, qAnswer, qAnalysis, flagSuccess = "", "", [], "", "", True
                        temp = each[:10]
                        for dqt in dynaQuesType:
                            if temp.find(dqt) != -1:
                                quesType = dqt
                                break
                        b1 = each.find("ËØïÈ¢ò")
                        if b1 != -1:
                            each = each[b1 + 3:]
                            c1 = each.find("Ê†áÂáÜÁ≠îÊ°à")
                            c2 = each.find("ËØïÈ¢òËß£Êûê")
                            b2 = each.find("ÈÄâÈ°π")
                            if c1 != -1 and c2 != -1:
                                if quesType == "Â°´Á©∫È¢ò":
                                    quesHeader = each[:c1].replace("\n\n", "").replace("\n", "").replace("**", "").replace("Êó†ÈÄâÈ°πÔºåÂ°´ÂÜôÁ©∫ÁôΩÂ§ÑÂç≥ÂèØ„ÄÇ", "").replace("Êó†ÈÄâÈ°πÔºåÊú¨È¢ò‰∏∫Â°´Á©∫È¢ò", "").replace("ÈÄâÈ°πÔºö", "").strip()
                                else:
                                    quesHeader = each[:b2].replace("\n\n", "").replace("\n", "").replace("**", "").strip()
                                if quesHeader.startswith("*: "):
                                    quesHeader = quesHeader[3:]
                                if quesType == "ÂçïÈÄâÈ¢ò" or quesType == "Â§öÈÄâÈ¢ò":
                                    b3 = each.find("Ê†áÂáÜÁ≠îÊ°à")
                                    if b3 != -1:
                                        Option = each[b2 + 3:b3].replace("\n\n", "").replace("Ê≠£Á°ÆÁöÑÔºü ÈÄâÈ°πÔºö", "").replace("Ê≠£Á°ÆÁöÑÔºü", "").strip().split("\n")
                                        displayOption = each[b2 + 3:b3].replace("**", "").replace("Ê≠£Á°ÆÁöÑÔºü ÈÄâÈ°πÔºö", "").replace("Ê≠£Á°ÆÁöÑÔºü", "").strip()
                                        displayOption = displayOption.replace("A. ", "\n\nA. ").replace("B. ", "\nB. ").replace("C. ", "\nC. ").replace("D. ", "\nD. ").replace("E. ", "\nE. ").replace("F. ", "\nF. ").replace("G. ", "\nG. ").replace("H. ", "\nH. ")
                                        for each2 in Option:
                                            for each3 in chars:
                                                each2 = each2.replace(f"{each3}.", "").strip()
                                            qOption = qOption + each2 + ";"
                                        if qOption.endswith(";"):
                                            qOption = qOption[:-1]
                                        b4 = each.find("ËØïÈ¢òËß£Êûê")
                                        if b4 != -1:
                                            qAnswer = each[b3 + 5:b4].replace("\n", "").replace("*", "").strip()
                                            displayAnswer = qAnswer
                                            qAnalysis = each[b4 + 5:].replace("\n", "").replace("*", "").strip()
                                            if quesType == "ÂçïÈÄâÈ¢ò":
                                                qAnswer = ord(qAnswer[0].upper()) - 65
                                                if qAnswer > 7 or qAnswer < 0:
                                                    flagSuccess = False
                                            elif quesType == "Â§öÈÄâÈ¢ò":
                                                qAnswer = qAnswer.replace("Ôºå", "").replace(",", "").replace("„ÄÅ", "").replace("„ÄÇ", "").replace(" ", "").replace("Ôºà", "(")
                                                if qAnswer.find("(") != -1:
                                                    qAnswer = qAnswer[:qAnswer.find("(")].strip()
                                                temp = ""
                                                print(f"Êú™Â§ÑÁêÜÂâçÁöÑÂ§öÈÄâÈ¢òÊ†áÂáÜÁ≠îÊ°à:{qAnswer}")
                                                for each4 in qAnswer:
                                                    if ord(each4.upper()) - 65 > 7 or ord(each4.upper()) - 65 < 0:
                                                        flagSuccess = False
                                                        break
                                                    else:
                                                        temp = temp + str(ord(each4) - 65) + ";"
                                                qAnswer = temp
                                                if qAnswer.endswith(";"):
                                                    qAnswer = qAnswer[:-1]
                                elif quesType == "Âà§Êñ≠È¢ò":
                                    if each[c1 + 5:c2].find("Ê≠£Á°Æ") != -1 or each[c1 + 5:c2].find("A") != -1:
                                        qAnswer = "1"
                                        displayAnswer = "Ê≠£Á°Æ"
                                    else:
                                        qAnswer = "0"
                                        displayAnswer = "ÈîôËØØ"
                                    displayOption = "A. Ê≠£Á°Æ\nB. ÈîôËØØ\n"
                                    qAnalysis = each[c2 + 5:].replace("\n", "").replace("*", "").strip()
                                elif quesType == "Â°´Á©∫È¢ò":
                                    displayOption = ""
                                    qAnswer = each[c1 + 5:c2].replace("\n", "").replace("*", "").replace("Êó†ÈÄâÈ°π", "").replace("Ôºõ", ";").replace("Ôºå", ";").replace("„ÄÇ", "").replace("„ÄÅ", ";").strip()
                                    if qAnswer.startswith(":"):
                                        qAnswer = qAnswer[1:]
                                    displayAnswer = qAnswer
                                    qAnalysis = each[c2 + 5:].replace("\n", "").replace("*", "").strip()
                                    i = 12
                                    while i > 0:
                                        if quesHeader.find("_" * i) != -1:
                                            quesHeader = quesHeader.replace("_" * i, "()")
                                        i -= 1
                            if qAnalysis.startswith(":"):
                                qAnalysis = qAnalysis[1:].strip()
                            if qAnalysis.endswith("---"):
                                qAnalysis = qAnalysis[:-3].strip()
                            if quesType == "ÂçïÈÄâÈ¢ò" and len(str(qAnswer)) > 1:
                                flagSuccess = False
                            if st.session_state.debug:
                                print(f"debug: È¢òÁõÆ:[{quesHeader}] ÈÄâÈ°π:[{qOption}], Ê†áÂáÜÁ≠îÊ°à:[{qAnswer}] Á≠îÈ¢òËß£Êûê:[{qAnalysis}]")
                        if qAnswer != "" and quesHeader != "" and len(str(qAnswer)) < 200 and len(quesHeader) < 200 and flagSuccess:
                            if table == "ÂÖ¨ÂÖ±È¢òÂ∫ì":
                                SQL = f"SELECT ID from commquestions where Question = '{quesHeader}' and qType = '{quesType}'"
                                if not mdb_sel(cur, SQL):
                                    SQL = f"INSERT INTO commquestions(Question, qOption, qAnswer, qType, qAnalysis, SourceType) VALUES('{quesHeader}', '{qOption}', '{qAnswer}', '{quesType}', '{qAnalysis}', 'AI-LLM')"
                                    mdb_ins(conn, cur, SQL)
                                    generQuesCount += 1
                            elif table == "Á´ôÂÆ§È¢òÂ∫ì":
                                SQL = f"SELECT ID from questions where Question = '{quesHeader}' and qType = '{quesType}' and StationCN = '{chosenStationCN}' and chapterName = '{chapter}'"
                                if not mdb_sel(cur, SQL):
                                    SQL = f"INSERT INTO questions(Question, qOption, qAnswer, qType, qAnalysis, StationCN, chapterName, SourceType) VALUES('{quesHeader}', '{qOption}', '{qAnswer}', '{quesType}', '{qAnalysis}', '{chosenStationCN}', '{chapter}', 'AI-LLM')"
                                    mdb_ins(conn, cur, SQL)
                                    generQuesCount += 1
                            displayQues = displayQues + f":blue[**Á¨¨{generQuesCount}È¢ò:**]\n\n:red[È¢òÂûã: ]{quesType}\n\n:red[È¢òÁõÆ: ]{quesHeader}\n\n:red[ÈÄâÈ°π: ]\n{displayOption}\n\n:red[Á≠îÊ°à: ]{displayAnswer}\n\n:red[Ëß£Êûê: ]{qAnalysis}\n\n{'-' * 40}\n\n"
                infoArea.empty()
                if generQuesCount > 0:
                    st.success("ËØïÈ¢òÁîüÊàêÊàêÂäü")
                    st.subheader(f"A.I.ÁîüÊàê{generQuesCount}ÈÅìËØïÈ¢ò:", divider="green")
                    st.markdown(displayQues)
                    #with open(outputFile, mode="w", encoding='utf-8') as f:
                    #f.write(displayQues.replace(" ]", "").replace("]", "").replace("**", "").replace("-" * 40, "").replace(":blue[", "").replace(":red[", "").replace("\n\n", "\n"))
                    #f.close()
                else:
                    st.info("A.I.Êú™ÁîüÊàêÂà∞‰ªª‰ΩïËØïÈ¢ò, ËØ∑Ê£ÄÊü•ÂèÇËÄÉËµÑÊñôÊòØÂê¶Ê≠£Á°ÆÊàñÊòØÁîüÊàêÁöÑËØïÈ¢òÂ∑≤ÁªèÂú®È¢òÂ∫ì‰∏≠")
            else:
                st.warning("Á´ôÂÆ§È¢òÂ∫ìËØ∑ÈÄâÊã©Á´†ËäÇ")
    else:
        st.info("ËØ∑ËÆæÁΩÆÂêÑÈÄâÈ°πÂíåÊ∑ªÂä†ÂèÇËÄÉËµÑÊñô")


def ClearMP():
    buttonSubmit = st.button("Ê∏ÖÁ©∫ÊâÄÊúâÂÜÖÂÆπ", type="primary")
    if buttonSubmit:
        bcArea = st.empty()
        with bcArea.container():
            st.button("Á°ÆËÆ§Ê∏ÖÁ©∫", type="secondary", on_click=ClearMPAction, args=(bcArea,))


def ClearMPAction(bcArea):
    mdb_del(conn, cur, SQL="DELETE FROM morepractise")
    bcArea.empty()
    st.success("ÈîôÈ¢òÈõÜÂ∑≤Ê∏ÖÁ©∫")


def studyinfo():
    study = sac.segmented(
        items=[
            sac.SegmentedItem(label="Â≠¶‰π†ËøõÂ∫¶", icon="grid-3x2-gap"),
            sac.SegmentedItem(label="ÈîôÈ¢òÈõÜ", icon="list-stars"),
            sac.SegmentedItem(label="Â≠¶‰π†ËÆ∞ÂΩïÈáçÁΩÆ", icon="bootstrap-reboot"),
        ], align="center", color="red"
    )
    if study == "Â≠¶‰π†ËøõÂ∫¶":
        studyinfoDetail()
    if study == "ÈîôÈ¢òÈõÜ":
        displayErrorQues()
    elif study == "Â≠¶‰π†ËÆ∞ÂΩïÈáçÁΩÆ":
        studyReset()


def displayErrorQues():
    SQL = f"SELECT Question, qOption, qAnswer, qType, qAnalysis, userAnswer, ID, WrongTime from morepractise where userAnswer <> '' and qAnswer <> userAnswer and userName = {st.session_state.userName} order by WrongTime DESC"
    rows = mdb_sel(cur, SQL)
    if rows:
        for row in rows:
            #st.subheader("", divider="red")
            with st.expander(label=f"È¢òÁõÆ: {row[0]} Ê¨°Êï∞: {row[7]}", expanded=False):
                if row[3] == "ÂçïÈÄâÈ¢ò":
                    st.write(":red[Ê†áÂáÜÁ≠îÊ°à:]")
                    option, userAnswer = [], ["A", "B", "C", "D"]
                    tmp = row[1].replace("Ôºõ", ";").split(";")
                    for index, each in enumerate(tmp):
                        each = each.replace("\n", "").replace("\t", "").strip()
                        option.append(f"{userAnswer[index]}. {each}")
                    st.radio(" ", option, key=f"compare_{row[6]}", index=int(row[2]), horizontal=True, label_visibility="collapsed", disabled=True)
                    st.write(f"‰Ω†ÁöÑÁ≠îÊ°à: :red[{userAnswer[int(row[5])]}] ‰Ω†ÁöÑÈÄâÊã©‰∏∫: :blue[ÈîôËØØ]")
                elif row[3] == "Â§öÈÄâÈ¢ò":
                    userOption = ["A", "B", "C", "D", "E", "F", "G", "H"]
                    st.write(":red[Ê†áÂáÜÁ≠îÊ°à:]")
                    option = row[1].replace("Ôºõ", ";").split(";")
                    orgOption = row[2].replace("Ôºõ", ";").split(";")
                    for index, value in enumerate(option):
                        value = value.replace("\n", "").replace("\t", "").strip()
                        if str(index) in orgOption:
                            st.checkbox(f"{userOption[index]}. {value}:", value=True, disabled=True)
                        else:
                            st.checkbox(f"{userOption[index]}. {value}:", value=False, disabled=True)
                    userAnswer = row[5].replace("Ôºõ", ";").split(";")
                    tmp = ""
                    for each in userAnswer:
                        tmp = tmp + userOption[int(each)] + ", "
                    st.write(f"‰Ω†ÁöÑÁ≠îÊ°à: :red[{tmp[:-2]}] ‰Ω†ÁöÑÈÄâÊã©‰∏∫: :blue[ÈîôËØØ]")
                elif row[3] == "Âà§Êñ≠È¢ò":
                    st.write(":red[Ê†áÂáÜÁ≠îÊ°à:]")
                    option = ["A. Ê≠£Á°Æ", "B. ÈîôËØØ"]
                    tmp = int(row[2]) ^ 1
                    st.radio(" ", option, key=f"compare_{row[6]}", index=tmp, horizontal=True, label_visibility="collapsed", disabled=True)
                    tmp = int(row[5]) ^ 1
                    st.write(f"‰Ω†ÁöÑÁ≠îÊ°à: :red[{option[tmp]}] ‰Ω†ÁöÑÈÄâÊã©‰∏∫: :blue[ÈîôËØØ]")
                elif row[3] == "Â°´Á©∫È¢ò":
                    option = row[2].replace("Ôºõ", ";").split(";")
                    userAnswer = row[5].replace("Ôºõ", ";").split(";")
                    st.write(":red[Ê†áÂáÜÁ≠îÊ°à:]")
                    for index, value in enumerate(option):
                        st.write(f"Á¨¨{index + 1}‰∏™Â°´Á©∫: :green[{value}]")
                    st.write("‰Ω†ÁöÑÁ≠îÊ°à:")
                    for index, value in enumerate(userAnswer):
                        st.write(f"Á¨¨{index + 1}‰∏™Â°´Á©∫: :red[{value}]")
                    st.write("‰Ω†ÁöÑÂ°´ÂÜô‰∏∫: :blue[ÈîôËØØ]")
                if row[4] != "":
                    if row[4].endswith("]"):
                        #st.write(row[4])
                        st.markdown(f"Á≠îÊ°àËß£Êûê: {row[4][:-1]}]")
                    else:
                        st.markdown(f"Á≠îÊ°àËß£Êûê: :green[{row[4]}]")
    else:
        st.info("ÊöÇÊó†Êï∞ÊçÆ")


def studyReset():
    buttonSubmit = st.button("ÈáçÁΩÆÂ≠¶‰π†ËÆ∞ÂΩï", type="primary")
    if buttonSubmit:
        st.button("Á°ÆËÆ§ÈáçÁΩÆ", type="secondary", on_click=studyResetAction)


def studyResetAction():
    SQL = f"DELETE from studyinfo where userName = {st.session_state.userName}"
    mdb_del(conn, cur, SQL)
    st.success("Â≠¶‰π†ËÆ∞ÂΩïÂ∑≤ÈáçÁΩÆ")


def studyinfoDetail():
    scol1, scol2, scol3, scol4, scol5 = st.columns(5)
    scol1.metric(label="ÂßìÂêç", value=st.session_state.userCName, help=st.session_state.userCName)
    scol2.metric(label="Á´ôÂÆ§", value=st.session_state.StationCN, help=st.session_state.StationCN)
    SQL = f"SELECT Count(ID) from questionaff where StationCN = '{st.session_state.StationCN}' and chapterName <> 'ÈîôÈ¢òÈõÜ'"
    rows = mdb_sel(cur, SQL)
    scol3.metric(label="Á´†ËäÇÊÄªËÆ°", value=rows[0][0], help="ÂåÖÂê´ÂÖ¨ÂÖ±È¢òÂ∫ì, ‰∏çÂê´ÈîôÈ¢òÈõÜ")
    SQL = f"SELECT Count(ID) from questions where StationCN = '{st.session_state.StationCN}' UNION SELECT Count(ID) from commquestions"
    rows = mdb_sel(cur, SQL)
    ct = rows[0][0] + rows[1][0]
    scol4.metric(label="ËØïÈ¢òÊÄªËÆ°", value=ct, help="ÂåÖÂê´ÂÖ¨ÂÖ±È¢òÂ∫ì, ‰∏çÂê´ÈîôÈ¢òÈõÜ")
    SQL = f"SELECT Count(ID) from studyinfo where userName = {st.session_state.userName}"
    rows = mdb_sel(cur, SQL)
    scol5.metric(label="Â∑≤Â≠¶‰π†ËØïÈ¢ò", value=rows[0][0], help=f"ÊÄªÂÆåÊàêÁéá: {int(rows[0][0] / ct * 100)}%")
    style_metric_cards(border_left_color="#8581d9")
    st.write("###### :violet[Â¶ÇÊûú‰∏äÈù¢6‰∏™Ê†áÁ≠æÊó†ÊòæÁ§∫ÂÜÖÂÆπ, ËØ∑ÊîπÁî®ÊµÖËâ≤‰∏ªÈ¢ò]")
    with st.expander("ÂêÑÁ´†ËäÇËøõÂ∫¶ËØ¶ÊÉÖ", icon=":material/format_list_bulleted:", expanded=True):
        SQL = "SELECT Count(ID) from commquestions"
        ct = mdb_sel(cur, SQL)[0][0]
        if ct > 0:
            SQL = f"SELECT Count(ID) from studyinfo where userName = {st.session_state.userName} and chapterName = 'ÂÖ¨ÂÖ±È¢òÂ∫ì'"
            cs = mdb_sel(cur, SQL)[0][0]
            st.progress(value=cs / ct, text=f":blue[ÂÖ¨ÂÖ±È¢òÂ∫ì] Â∑≤ÂÆåÊàê :orange[{int((cs / ct) * 100)}%]")
        SQL = f"SELECT chapterName from questionaff where StationCN = '{st.session_state.StationCN}' and chapterName <> 'ÂÖ¨ÂÖ±È¢òÂ∫ì' and chapterName <> 'ÈîôÈ¢òÈõÜ' order by ID"
        rows = mdb_sel(cur, SQL)
        for row in rows:
            SQL = f"SELECT Count(ID) from questions where StationCN = '{st.session_state.StationCN}' and chapterName = '{row[0]}'"
            ct = mdb_sel(cur, SQL)[0][0]
            if ct > 0:
                SQL = f"SELECT Count(ID) from studyinfo where userName = {st.session_state.userName} and chapterName = '{row[0]}'"
                cs = mdb_sel(cur, SQL)[0][0]
                st.progress(value=cs / ct, text=f":blue[{row[0]}] Â∑≤ÂÆåÊàê :orange[{int((cs / ct) * 100)}%]")


conn = apsw.Connection("./DB/ETest_enc.db")
cur = conn.cursor()
cur.execute("PRAGMA cipher = 'aes256cbc'")
cur.execute("PRAGMA key = '7745'")
cur.execute("PRAGMA journal_mode = WAL")

st.logo("./Images/etest-logo.png", icon_image="./Images/exam2.png")

login_page = st.Page(login, title="ÁôªÂΩï", icon=":material/login:")
logout_page = st.Page(logout, title="ÁôªÂá∫", icon=":material/logout:")
changePassword_menu = st.Page(changePassword, title="‰øÆÊîπÂØÜÁ†Å", icon=":material/lock_reset:")

dashboard_page = st.Page("training.py", title="ÁîüÊàêÈ¢òÂ∫ì", icon=":material/construction:", default=True)
choseExam_page = st.Page("training.py", title="ÈÄâÊã©ËÄÉËØï", icon=":material/data_check:", default=True)
trainingQues_page = st.Page("exam.py", title="È¢òÂ∫ìÁªÉ‰π†", icon=":material/format_list_bulleted:")
execExam_page = st.Page("exam.py", title="ÂºÄÂßãËÄÉËØï", icon=":material/history_edu:")
search_page = st.Page("search.py", title="‰ø°ÊÅØÊü•ËØ¢", icon=":material/search:")
dbsetup_page = st.Page("dbsetup.py", title="ÂèÇÊï∞ËÆæÁΩÆ", icon=":material/settings:")
dbbasedata_page = st.Page("dbbasedata.py", title="Êï∞ÊçÆÂΩïÂÖ•", icon=":material/app_registration:")
todo_menu = st.Page(todo, title="ÂæÖÂäû‰∫ãÈ°π", icon=":material/event_note:")
aboutInfo_menu = st.Page(aboutInfo, title="ÂÖ≥‰∫é...", icon=":material/info:")
aboutLicense_menu = st.Page(aboutLicense, title="License", icon=":material/license:")
dboutput_menu = st.Page(dboutput, title="Êñá‰ª∂ÂØºÂá∫", icon=":material/output:")
dbfunc_menu = st.Page(dbfunc, title="È¢òÂ∫ìÂäüËÉΩ", icon=":material/input:")
studyinfo_menu = st.Page(studyinfo, title="Â≠¶‰π†‰ø°ÊÅØ", icon=":material/import_contacts:")


if "logged_in" not in st.session_state:
    st.session_state.logged_in = False
    st.rerun()

if st.session_state.logged_in:
    if st.session_state.examType == "exam":
        pg = st.navigation(
            {
                "ÂäüËÉΩ": [choseExam_page, execExam_page],
                "Ë¥¶Êà∑": [changePassword_menu, logout_page],
                "ÂÖ≥‰∫é": [aboutLicense_menu, aboutInfo_menu],

            }
        )
    elif st.session_state.examType == "training":
        if st.session_state.userType == "admin":
            pg = st.navigation(
                {
                    "ÂäüËÉΩ": [dashboard_page, trainingQues_page, dbbasedata_page, dboutput_menu, dbfunc_menu, dbsetup_page],
                    "Êü•ËØ¢": [search_page],
                    "‰ø°ÊÅØ": [studyinfo_menu],
                    "Ë¥¶Êà∑": [changePassword_menu, logout_page],
                    "ÂÖ≥‰∫é": [aboutLicense_menu, aboutInfo_menu],
                }
            )
        elif st.session_state.userType == "user":
            pg = st.navigation(
                {
                    "ÂäüËÉΩ": [dashboard_page, trainingQues_page],
                    "‰ø°ÊÅØ": [studyinfo_menu],
                    "Ë¥¶Êà∑": [changePassword_menu, logout_page],
                    "ÂÖ≥‰∫é": [aboutLicense_menu, aboutInfo_menu],
                }
            )
else:
    pg = st.navigation([login_page])

updatePyFileinfo()

pg.run()
